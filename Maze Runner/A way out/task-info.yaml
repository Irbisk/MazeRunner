type: edu
custom_name: stage4
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        boolean withPath;
        int count;
        Clue(int s, int c, boolean wp) {
            size = s;
            count = c;
            withPath = wp;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n29\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n35\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n5\n0")
                    .setAttach(new Clue(35, 2, true))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() != clue.count) {
                if (clue.count == 1) {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be only one maze."
                    );
                } else {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be two mazes."
                    );
                }
            }

            Maze fst = mazes.get(0);
            Maze snd = mazes.size() == 2 ? mazes.get(1) : null;

            if (snd != null && !fst.equals(snd)) {
                return CheckResult.wrong(
                    "The two mazes shown should be equal, but they are different."
                );
            }

            if (fst.count(Elem.PATH) != 0) {
                return CheckResult.wrong(
                    "The first maze should not contain '/' characters."
                );
            }

            int entrances = fst.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = fst.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (fst.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + fst.getHeight() + ", but should be " + clue.size);
            }

            if (fst.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + fst.getWidth() + ", but should be " + clue.size);
            }

            if (snd != null && clue.withPath) {
                try {
                    int pathLeft = snd.checkPath();
                    if (pathLeft > 0) {
                        return new CheckResult(false,
                            "There are " + pathLeft + " escape path ('//') " +
                                "cells that are separated from the escape path of the maze " +
                                "(or there is a break somewhere in the escape path)."
                        );
                    }
                } catch (Exception e) {
                    return CheckResult.wrong(
                        e.getMessage()
                    );
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/Edge.java
  visible: true
  text: |
    package maze;

    public class Edge implements Comparable<Edge> {

        Vertex _from;
        Vertex _to;
        int weight;
        static int totalEdges = 0;

        public Edge(Vertex from, Vertex to, int weight) {
            this._from = from;
            this._to = to;
            this.weight = weight;
        }


        @Override
        public String toString() {
            return this._from.getName() + " ----- " + this._to.getName();
        }

        @Override
        public int compareTo(Edge o) {
            return (this.weight - o.weight);
        }

    }
  learner_created: true
- name: src/maze/ShortestPath.java
  visible: true
  text: |+
    package maze;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;

    public class ShortestPath {
        private Vertex start, end;
        private int length = 0;
        private int shortLength = Integer.MAX_VALUE;


        public ShortestPath(Vertex start, Vertex end) {
            this.start = start;
            this.end = end;
        }

        public void dfs(Vertex vertex, int[][] mazeResult){

            length +=1;

            if(length > shortLength)
                return;

            if(vertex == end){
                shortLength = length;
                return;
            }

            vertex.setVisited(true);

            for(Vertex nbr: vertex.getNeighbours(mazeResult)){
                if(!nbr.isVisited()){
                    nbr.setPrev(vertex);
                    dfs(nbr, mazeResult);
                }
            }
            length -=1;
        }

        public List<Vertex> trace_route(){
            Vertex vertex = end;
            List<Vertex> route = new ArrayList<>();

            while(vertex != null){
                route.add(vertex);
                vertex = vertex.getPrev();
            }
            Collections.reverse(route);

            return route;
        }
    }

  learner_created: true
- name: src/maze/Cell.java
  visible: true
  text: |
    package maze;

    public class Cell {
        private int x;
        private int y;
        private int value;

        public Cell(int x, int y, int value) {
            this.x = x;
            this.y = y;
            this.value = value;
        }

        public int getValue() {
            return value;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }
    }
  learner_created: true
- name: src/maze/MazeHandler.java
  visible: true
  text: |
    package maze;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class MazeHandler {
        private static final String pathToFile = "C:\\Users\\irbis\\IdeaProjects\\Maze Runner\\Maze Runner\\task\\src\\files\\";
        Scanner scanner = new Scanner(System.in);

        public void saveMaze(int[][] mazeResult) {
            String fileName = scanner.nextLine();
            File file = new File(pathToFile + fileName);
            try (PrintWriter printWriter = new PrintWriter(file)) {
                printWriter.print(mazeResult.length + " ");
                for (int i = 0; i < mazeResult.length; i++) {
                    for (int j = 0; j < mazeResult[0].length; j++) {
                        printWriter.print(mazeResult[i][j] + " ");
                    }
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        public int[][] loadMaze() {
            String fileName = scanner.nextLine();
            int[][] mazeResult = null;
            try {
                String text = readFileAsString(pathToFile + fileName);
                if (!text.isEmpty()) {
                    String[] numbers = text.split(" ");
                    if (numbers[0].matches("\\d+")) {
                        int size = Integer.parseInt(numbers[0]);
                        if (numbers.length == size * size + 1) {
                            mazeResult = new int[size][size];
                            int number = 0;
                            for (int i = 0; i < size; i++) {
                                for (int j = 0; j < size; j++) {
                                    mazeResult[i][j] = Integer.parseInt(numbers[++number]);
                                }
                            }
                        } else {
                            System.out.println("Cannot load the maze. It has an invalid format");
                        }
                    } else {
                        System.out.println("Cannot load the maze. It has an invalid format");
                    }
                } else {
                    System.out.println("Cannot load the maze. It has an invalid format");
                }

            } catch (FileNotFoundException e) {
                System.out.println("The file " + fileName + " does not exist");
            } catch (IOException e) {
                e.printStackTrace();
            }

            return mazeResult;
        }



        public int[][] generateNewMaze() {
            System.out.println("Enter the size of a new maze");
            int size = scanner.nextInt();
            scanner.nextLine();
            Maze maze = new Maze(size, size);
            maze.prim();
            Maze.printMatrix(maze.result);
            return maze.result;
        }

        public void findEscape(int[][] mazeResult) {
            Vertex start = Vertex.findStart(mazeResult);
            Vertex end = Vertex.findEnd(mazeResult);

            ShortestPath shortestPath = new ShortestPath(start, end);
            shortestPath.dfs(start, mazeResult);
            List<Vertex> route = shortestPath.trace_route();
            route.forEach(vertex -> {
                int x = vertex.getX();
                int y = vertex.getY();
                mazeResult[x][y] = 2;
            });

            Maze.printMatrix(mazeResult);

        }

        public static String readFileAsString(String fileName) throws IOException {
            return new String(Files.readAllBytes(Paths.get(fileName)));
        }





    }
  learner_created: true
- name: src/files/test_maze.txt
  visible: true
  text: '15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1 0 1 1 1 0 1 0 0 1 0 1 0
    0 0 1 0 1 0 1 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0
    0 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 0 1 1 1
    1 1 1 1 1 1 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1
    0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 1 0 0 0 1 0 0 0
    1 0 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 '
  learner_created: true
- name: src/maze/Program.java
  visible: true
  text: |
    package maze;

    import java.util.Scanner;

    public class Program {
        Scanner scanner = new Scanner(System.in);
        private static int[][] mazeResult;
        private static boolean on = true;
        public void start() {
            while (on) {
                if (mazeResult == null) {
                    menuNull();
                } else{
                    menu();
                }
            }
        }

        private void menuNull() {
            System.out.println("=== Menu ===\n" +
                    "1. Generate a new maze\n" +
                    "2. Load a maze\n" +
                    "0. Exit");

            int command = scanner.nextInt();

            switch (command) {
                case 1:
                    MazeHandler mazeHandler = new MazeHandler();
                    mazeResult = mazeHandler.generateNewMaze();
                    break;
                case 2:
                    mazeHandler = new MazeHandler();
                    mazeResult = mazeHandler.loadMaze();
                    break;
                case 0:
                    System.out.println("Bye!");
                    on = false;
                default:
                    System.out.println("Incorrect option. Please try again");
            }


        }

        private void menu() {

                System.out.println("=== Menu ===\n" +
                        "1. Generate a new maze\n" +
                        "2. Load a maze\n" +
                        "3. Save the maze\n" +
                        "4. Display the maze\n" +
                        "5. Find the escape\n" +
                        "0. Exit");
                int command = scanner.nextInt();
                switch (command) {
                    case 1:
                        MazeHandler mazeHandler = new MazeHandler();
                        mazeResult = mazeHandler.generateNewMaze();
                        break;
                    case 2:
                        mazeHandler = new MazeHandler();
                        mazeResult = mazeHandler.loadMaze();
                        break;
                    case 3:
                        mazeHandler = new MazeHandler();
                        mazeHandler.saveMaze(mazeResult);
                        break;
                    case 4:
                        Maze.printMatrix(mazeResult);
                        break;
                    case 5:
                        mazeHandler = new MazeHandler();
                        mazeHandler.findEscape(mazeResult);
                        break;
                    case  0:
                        on = false;
                        System.out.println("Bye!");
                    default:
                        System.out.println("Incorrect option. Please try again");
                }
        }



    }
  learner_created: true
- name: src/maze/Vertex.java
  visible: true
  text: |
    package maze;

    import java.util.ArrayList;
    import java.util.List;

    public class Vertex {
        private int name;
        private boolean visited;
        private List<Edge> edges;
        private List<Vertex> neighbours;
        private final int x;
        private final int y;
        private Vertex prev = null;
        private int value = 0;

        public List<Edge> getEdges() {
            return edges;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public Vertex(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public Vertex getPrev() {
            return prev;
        }


        public void setNeighbours(List<Vertex> neighbours) {
            this.neighbours = neighbours;
        }

        public Vertex(int x, int y, int name) {
            this.x = x;
            this.y = y;
            this.name = name;
            this.edges = new ArrayList<>();
        }

        public void setVisited(boolean visited) {
            this.visited = visited;
        }

        public Integer getName() {
            return name;
        }

        public int getValue() {
            return value;
        }

        public boolean isVisited() {
            return visited;
        }

        public void connect(Vertex vertex, int edgeWeight) {
            edges.add(new Edge(this, vertex, edgeWeight));
            edges.add(new Edge(vertex, this, edgeWeight));
        }

        public void setPrev(Vertex prev) {
            this.prev = prev;
        }

        public void setValue(int value) {
            this.value = value;
        }

        public List<Vertex> getNeighbours(int[][] mazeResult) {
            List<Vertex> neighbours = new ArrayList<>();
            int x = this.getX();
            int y = this.getY();

            // up
            int x1 = x - 1;
            int y1 = y;

            if (x1 >= 0) {
                if (mazeResult[x1][y1] == 1) {
                    neighbours.add(new Vertex(x1, y1));
                }
            }

            // down

            x1 = x + 1;
            y1 = y;

            if (x1 < mazeResult.length) {
                if (mazeResult[x1][y1] == 1) {
                    neighbours.add(new Vertex(x1, y1));
                }
            }

            //right
            x1 = x;
            y1 = y + 1;

            if (y1 < mazeResult[0].length) {
                if (mazeResult[x1][y1] == 1) {
                    neighbours.add(new Vertex(x1, y1));
                }
            }
            //left
            x1 = x;
            y1 = y - 1;
            if (y1 >= 0) {
                if (mazeResult[x1][y1] == 1) {
                    neighbours.add(new Vertex(x1, y1));
                }
            }

            return neighbours;
        }

        public static Vertex findStart(int[][] mazeResult) {
            Vertex start = null;
            for (int i = 0; i < mazeResult.length; i++) {
                if (mazeResult[i][0] == 1) {
                    start = new Vertex(i, 0, 0);
                }
            }
            return start;
        }

        public static Vertex findEnd(int[][] mazeResult) {
            Vertex end = null;
            for (int i = 0; i < mazeResult.length; i++) {
                if (mazeResult[i][mazeResult.length - 1] == 1) {
                    end = new Vertex(i, 0, 0);
                }
            }
            return end;
        }

        @Override
        public String toString() {
            return "Name: " + getName() + "\nX: " + getX() + "\nY: " + getY();
        }
    }
  learner_created: true
- name: src/maze/Maze.java
  visible: true
  text: |+
    package maze;

    import java.util.*;

    public class Maze {
        private Vertex[][] matrix;
        private int x;
        private int y;

        public int[][] result;

        public Maze(int x, int y) {
            this.x = x;
            this.y = y;
            this.matrix = new Vertex[(x - 1) / 2][(y - 1) / 2];
            this.matrix = createMatrix();
        }

        public void printAdjMatrix(int[][] adjacentMatrix) {
            for (int[] ints : adjacentMatrix) {
                for (int j = 0; j < adjacentMatrix[0].length; j++) {
                    String value;
                    if (ints[j] == Integer.MAX_VALUE) {
                        value = "Ш";
                    } else {
                        value = String.valueOf(ints[j]);
                    }
                    System.out.print(value + " ");
                }
                System.out.println();
            }
        }

        public List<Vertex> createVertexList(Vertex[][] matrix) {
            List<Vertex> list = new ArrayList<>();
            int name = 0;
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    matrix[i][j] = new Vertex(i, j, name++);
                    list.add(matrix[i][j]);
                }
            }
            return list;
        }

        public Vertex[][] createMatrix () {
            List<Vertex> list = createVertexList(this.matrix);

            //create adjMatrix

            int[][] adjMatrix = new int[list.size()][list.size()];

            Random random = new Random();

            for (int i = 0; i < adjMatrix.length; i++) {
                for (int j = 0; j < adjMatrix[0].length; j++) {
                    if (i == j) {
                        adjMatrix[i][j] = 0;
                    } else {
                        if (checkAdj(list.get(i), list.get(j))) {

                            if (adjMatrix[j][i] != 0) {
                                adjMatrix[i][j] = adjMatrix[j][i];
                            } else {
                                adjMatrix[i][j] = random.nextInt(4) + 1;
                            }

                            //connect vertixes in the list
                            list.get(i).connect(list.get(j), adjMatrix[i][j]);
                        } else {
                            adjMatrix[i][j] = Integer.MAX_VALUE;
                        }
                    }
                }
            }

            //create result matrix with Vertixes with connected edges
            int count = 0;

            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    this.matrix[i][j] = list.get(count++);
                }
            }
            return this.matrix;
        }


        public boolean checkAdj(Vertex v1, Vertex v2) {
            int x1 = v1.getX();
            int y1 = v1.getY();
            int x2 = v2.getX();
            int y2 = v2.getY();
            return (Math.abs(x2 - x1) == 1 && Math.abs(y2 - y1) == 0) ||
                    (Math.abs(x2 - x1) == 0 && Math.abs(y2 - y1) == 1);
        }



        public void prim() {

            PriorityQueue<Edge> priorityQueue = new PriorityQueue<>();
            List<Edge> mst = new ArrayList<>();
            Vertex start = matrix[new Random().nextInt(matrix.length)][0];

            addEdges(start, priorityQueue);
            while (!priorityQueue.isEmpty()) {
                Edge minEdge = priorityQueue.poll();

                if (minEdge._to.isVisited()) {
                    continue;
                } else {
                    mst.add(minEdge);
                    addEdges(minEdge._to, priorityQueue);
                }
            }
            createResult(mst);
        }

        void addEdges(Vertex s, PriorityQueue<Edge> priorityQueue) {
            s.setVisited(true);
            for (Edge edge: s.getEdges()) {
                if (!edge._to.isVisited()) {
                    priorityQueue.add(edge);
                }
            }
        }



        public void createResult(List<Edge> list) {


            int[][] initMatrix = new int[this.matrix.length * 2 - 1][this.matrix[0].length * 2 - 1];
            Arrays.stream(initMatrix).forEach(row -> Arrays.stream(row).forEach(x -> x = 0));
            list.forEach(vertex -> {
                int fromX = vertex._from.getX();
                int fromY = vertex._from.getY();
                int toX = vertex._to.getX();
                int toY = vertex._to.getY();

                int resultX;
                int resultY;

                if (fromX == toX) {
                    resultX = fromX * 2;
                    if (fromY < toY) {

                        resultY = toY * 2 - 1;
                    } else {
                        resultY = toY * 2 + 1;
                    }
                } else {
                    resultY = fromY * 2;
                    if (fromX < toX) {
                        resultX = toX * 2 - 1;
                    } else  {
                        resultX = toX * 2 + 1;
                    }
                }

                initMatrix[fromX * 2][fromY * 2] = 1;
                initMatrix[resultX][resultY] = 1;
                initMatrix[toX * 2][toY * 2] = 1;
            });

            int[][] resultMatrix = new int[initMatrix.length + 2][initMatrix[0].length + 2];
            for (int i = 0; i < resultMatrix.length; i++) {
                for (int j = 0; j < resultMatrix[0].length; j++) {
                    if (i == 0 || i == resultMatrix.length - 1) {
                        resultMatrix[i][j] = 0;
                    }
                    if (j == 0 || j == resultMatrix[0].length - 1) {
                        resultMatrix[i][j] = 0;
                    }
                    if (i > 0 && i < resultMatrix.length - 1 && j > 0 && j < resultMatrix[0].length - 1) {
                        resultMatrix[i][j] = initMatrix[i - 1][j - 1];
                    }
                }
            }



            //create enter
            while (true) {
                int enter = new Random().nextInt(resultMatrix.length - 1);
                if (resultMatrix[enter][1] == 1) {
                    resultMatrix[enter][0] = 1;
                    break;
                }
            }
            //create exit
            while (true) {
                int enter = new Random().nextInt(resultMatrix.length - 1);
                if (resultMatrix[enter][resultMatrix[0].length - 2] == 1) {
                    resultMatrix[enter][resultMatrix[0].length - 1] = 1;
                    break;
                }
            }


            //for even matrix sizes
            if (x % 2 == 0 || y % 2 == 0) {
                if (x % 2 == 0 && y % 2 == 1) {
                    int[][] evenMatrix = new int[resultMatrix.length + 1][resultMatrix[0].length];
                    for (int i = 0; i < evenMatrix.length; i++) {
                        for (int j = 0; j < evenMatrix[0].length; j++) {
                            if (i == evenMatrix.length - 2) {
                                evenMatrix[i][j] = resultMatrix[i - 1][j];
                            } else if (i == evenMatrix.length - 1) {
                                evenMatrix[i][j] = 0;
                            } else {
                                evenMatrix[i][j] = resultMatrix[i][j];
                            }

                        }
                    }
                    result = correctExits(evenMatrix);

                } else if (x % 2 == 1) {
                    int[][] evenMatrix = new int[resultMatrix.length][resultMatrix[0].length + 1];
                    for (int i = 0; i < evenMatrix.length; i++) {
                        for (int j = 0; j < evenMatrix[0].length; j++) {
                            if (j == evenMatrix[0].length - 1) {
                                evenMatrix[i][j] = resultMatrix[i][resultMatrix.length - 1];
                            } else {
                                evenMatrix[i][j] = resultMatrix[i][j];
                            }
                        }
                    }
                    result = evenMatrix;
                } else {
                    int[][] evenMatrixDemo = new int[resultMatrix.length][resultMatrix[0].length + 1];
                    for (int i = 0; i < evenMatrixDemo.length; i++) {
                        for (int j = 0; j < evenMatrixDemo[0].length; j++) {
                            if (j == evenMatrixDemo[0].length - 1) {
                                evenMatrixDemo[i][j] = resultMatrix[i][resultMatrix.length - 1];
                            } else {
                                evenMatrixDemo[i][j] = resultMatrix[i][j];
                            }
                        }
                    }
                    int[][] evenMatrix = new int[evenMatrixDemo.length + 1][evenMatrixDemo[0].length];
                    for (int i = 0; i < evenMatrix.length; i++) {
                        for (int j = 0; j < evenMatrix[0].length; j++) {
                            if (i == evenMatrix.length - 2) {
                                evenMatrix[i][j] = evenMatrixDemo[i - 1][j];
                            } else if (i == evenMatrix.length - 1) {
                                evenMatrix[i][j] = 0;
                            } else {
                                evenMatrix[i][j] = evenMatrixDemo[i][j];
                            }
                        }
                    }
                    result = correctExits(evenMatrix);
                }
            } else {
                result = resultMatrix;
            }
        }

        public static void printMatrix(int[][] matrix) {
            String space = "  ";
            String wall = "\u2588\u2588";
            String way = "//";
            for (int[] ints : matrix) {
                for (int j = 0; j < matrix[0].length; j++) {
                    if (ints[j] == 0) {
                        System.out.print(wall);
                    } else if (ints[j] == 1) {
                        System.out.print(space);
                    } else {
                        System.out.println(way);
                    }
                }
                System.out.println();
            }

        }

        private int[][] correctExits(int[][] matrix) {
            int count = 0;
            for (int i = 0; i < matrix.length; i++) {
                if (matrix[i][0] == 1) {
                    count++;
                }
                if (matrix[i][matrix[0].length - 1] == 1) {
                    count++;
                }
            }

            if (count != 2) {
                int side = 0;
                for (int i = 0; i < matrix.length; i++) {
                    if (side == 1) {
                        matrix[i][0] = 0;
                        side = 0;
                        break;
                    }
                    if (matrix[i][0] == 1) {
                        side++;
                    }

                }
                for (int i = 0; i < matrix.length; i++) {
                    if (side == 1) {
                        matrix[i][matrix[0].length - 1] = 0;
                        break;
                    }
                    if (matrix[i][matrix[0].length - 1] == 1) {
                        side++;
                    }

                }
            }
            return matrix;
        }
    }


  learner_created: true
- name: src/files/file.txt
  visible: true
  text: '15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0
    1 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0
    0 0 1 1 1 0 1 0 1 0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 0 0 1 0 1 0 1 0 1
    0 1 1 1 1 1 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1
    0 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 1 0
    1 0 1 0 0 1 0 1 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 '
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5396#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 05 Feb 2023 11:47:10 UTC
record: -1
